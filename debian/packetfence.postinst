#!/bin/sh
# postinst script for packetfence
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

# Force the LC_CTYPE to C to avoid i18n problems during postinstallation.
LC_CTYPE=C
export LC_CTYPE

DIST=$(lsb_release -c -s)

case "$1" in
    configure)
        export PACKETFENCE=/usr/local/pf
        export PERL5LIB=/usr/local/pf/lib
        find $PACKETFENCE/conf -type f -exec chmod 664 '{}' \;
        find $PACKETFENCE/conf -type d -exec chmod 775 '{}' \;
        chmod 2775 -R $PACKETFENCE/var
        find $PACKETFENCE/var/conf -type f -exec chmod 664 '{}' \;
        find $PACKETFENCE/var/conf -type d -exec chmod 775 '{}' \;
        chmod 0755 $PACKETFENCE/addons/*.pl
        chmod 0755 $PACKETFENCE/addons/*.sh
        chmod 0755 $PACKETFENCE/addons/upgrade/*.pl
        chmod 0755 $PACKETFENCE/addons/watchdog/*.sh
        chmod 0755 $PACKETFENCE/bin/*
        chmod 0755 $PACKETFENCE/sbin/*
        chmod ug+s $PACKETFENCE/bin/pfcmd

        chown pf:pf $PACKETFENCE
        find $PACKETFENCE '(' -type d -or -type f ')' -not -name pfcmd -not -path "$PACKETFENCE/logs*" -print0 | xargs -0 chown pf:pf
        chgrp pf $PACKETFENCE/logs

        touch $PACKETFENCE/var/run/pkg_install_in_progress

        # link to latest SQL schema
        if [ -h "$PACKETFENCE/db/pf-schema.sql" ]; then
            rm $PACKETFENCE/db/pf-schema.sql
        fi
        cd $PACKETFENCE/db
        VERSIONSQL=$(ls pf-schema-* |sort --version-sort -r | head -1)
        ln -f -s $VERSIONSQL ./pf-schema.sql

        cd /usr/local/pf

        #Make ssl certificate
        make conf/ssl/server.pem
        chown pf $PACKETFENCE/conf/ssl/server.key

        #Make configurable logo in default profile templates
        make html/captive-portal/profile-templates/default/logo.png

        # Stop packetfence-config during upgrade process to ensure
        # it is started with latest code
        if [ "$(/bin/systemctl show -p ActiveState packetfence-config | awk -F '=' '{print $2}')" = "active" ]; then
            echo "Upgrade: packetfence-config has been started during preinstallation (packetfence-base.target)"
            echo "Stopping packetfence-config to ensure proper upgrade"
            /bin/systemctl stop packetfence-config
        else
            echo "First installation or downgrade: packetfence-config will be started later in the process"
        fi

        echo "Disabling emergency error logging to the console"
        /bin/sed -i 's/^\*.emerg/#*.emerg/g' /etc/rsyslog.conf

        # Create server local RADIUS secret
        if [ ! -f /usr/local/pf/conf/local_secret ]; then
            date +%s | sha256sum | base64 | head -c 32 > /usr/local/pf/conf/local_secret
        fi

        # Create server API system user password
        if [ ! -f /usr/local/pf/conf/unified_api_system_pass ]; then
            date +%s | sha256sum | base64 | head -c 32 > /usr/local/pf/conf/unified_api_system_pass
        fi

        if [ ! -f /usr/local/pf/raddb/certs/dh ]; then
            echo "Building default RADIUS certificates..."
            cd /usr/local/pf/raddb/certs
            make
        else
            echo "DH already exists, won't touch it!"
        fi

        if [ ! -f /usr/local/pf/conf/pf.conf ]; then
            echo "pf.conf doesnt exits"
            touch /usr/local/pf/conf/pf.conf
            chown pf:pf /usr/local/pf/conf/pf.conf
        else
            echo "pf.conf already exists, won't touch it!"
        fi

        mkdir -p /usr/local/pf/html/captive-portal/profile-templates/default
        cp /usr/local/pf/html/common/packetfence-cp.png /usr/local/pf/html/captive-portal/profile-templates/default/logo.png

        # Firewalld handeling
        set +e
        # Related to firewalld.service
        /bin/systemctl stop firewalld.service
        /bin/systemctl disable firewalld.service
        /bin/systemctl mask firewalld.service
        /bin/rm -rf /usr/lib/systemd/system/firewalld.service
        /bin/rm -rf /lib/systemd/system/firewalld.service
        /bin/systemctl daemon-reload
        set -e

        # Set iptables legacy
        set +e
        update-alternatives --set iptables /usr/sbin/iptables-legacy
        update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy
        set -e

        # managing services
	set +e
        for service in apache2 snmptrapfmt freeradius apparmor haproxy keepalived redis-server smbd samba nmbd mysql snmpd netdata collectd proxysql; do

            if [ -e "/etc/init.d/"$service ] ; then
                invoke-rc.d $service stop  > /dev/null 2>&1
                if [ -e /etc/lsb-release ]; then
                    update-rc.d -f $service remove > /dev/null 2>&1
                else
                    update-rc.d $service remove > /dev/null 2>&1
                fi
            fi
            if [ ${DIST} = "jessie" ] || [ ${DIST} = "stretch" ] || [ ${DIST} = "bullseye" ]  || [ ${DIST} = "bookworm" ]; then
                if [ -e "/lib/systemd/system/"$service".service" ] ; then
                    systemctl stop $service
                    systemctl disable $service
                fi
            fi

        done
        set -e


        /sbin/ldconfig
        # Enabling ip forwarding
        echo "# ip forwarding enabled by packetfence" > /etc/sysctl.d/99-ip_forward.conf
        echo "net.ipv4.ip_forward = 1" >> /etc/sysctl.d/99-ip_forward.conf
        sysctl -p /etc/sysctl.d/99-ip_forward.conf

        if ! grep 'containers-gateway.internal' /etc/hosts > /dev/null; then
          echo "" >> /etc/hosts
          echo "100.64.0.1 containers-gateway.internal" >> /etc/hosts
        fi

        perl /usr/local/pf/addons/upgrade/add-default-params-to-auth.pl
 
        #Starting PacketFence.
        #removing old cache
        rm -rf /usr/local/pf/var/cache/

        # Start packetfence web administration
        if [ `systemctl get-default` = "packetfence-cluster.target" ]; then
           echo "This is an upgrade on a clustered system. We don't change the default systemd target."
        else
            echo "Setting packetfence.target as the default systemd target."
           /bin/systemctl set-default packetfence.target
        fi

        systemctl daemon-reload
        echo "Restarting journald to enable persistent logging"
        /bin/systemctl restart systemd-journald
        echo "Restarting rsyslog"
        systemctl restart rsyslog

        # check if we are inside our Debian ISO installer (chroot environment)
        if [ -f /media/cdrom/postinst-debian-installer.sh ]; then
            DEBIAN_ISO_INSTALLER=yes
            echo "Debian ISO installer detected, launching Docker manually"
            /usr/local/pf/containers/run-docker-in-debian-installer.sh

            # remove file in advance to timeout more quickly
            rm -f $PACKETFENCE/var/run/pkg_install_in_progress
        else
            DEBIAN_ISO_INSTALLER=no
            systemctl restart docker
        fi

        # get containers image and tag them locally
        /usr/local/pf/containers/manage-images.sh

        if [ -n "$2" ]; then
            if dpkg --compare-versions "$2" lt "12"; then
                echo "Migrating from a version prior to 12.0. Need to restart some services..."
                systemctl start packetfence-config
                systemctl restart packetfence-mariadb
                systemctl restart packetfence-redis-cache
            fi
        fi

        systemctl enable packetfence-mariadb
        systemctl enable packetfence-redis-cache
        systemctl enable packetfence-config
        systemctl enable packetfence-haproxy-admin
        systemctl enable packetfence-tracking-config.path
        systemctl start packetfence-config
        if [ "$DEBIAN_ISO_INSTALLER" = "no" ];  then
            # next command need packetfence-config started
            /usr/local/pf/bin/pfcmd generatemariadbconfig --force
        else
            echo "MariaDB config will be generated at next boot"
        fi

        # only packetfence-config is running after this command
        systemctl isolate packetfence-base.target

        # Override the MySQL socket location to match our standard
        printf '[client-server]\nsocket = /var/lib/mysql/mysql.sock\n' > /etc/mysql/mariadb.conf.d/999-socket-override.cnf
        sed -i 's#^socket\s*=.*#socket=/var/lib/mysql/mysql.sock#' /etc/mysql/my.cnf

        if [ "$DEBIAN_ISO_INSTALLER" = "no" ];  then
            # next command need Redis started
            /usr/local/pf/bin/pfcmd configreload
        else
            echo "Configreload is not necessary at this step"
        fi
        /usr/local/pf/bin/pfcmd fixpermissions
        echo "Starting PacketFence Administration GUI..."
        /bin/systemctl start packetfence-httpd.admin_dispatcher
        /bin/systemctl start packetfence-haproxy-admin
        systemctl enable packetfence-firewalld
        systemctl stop packetfence-firewalld
        if [ "$DEBIAN_ISO_INSTALLER" = "no" ];  then
            /usr/local/pf/containers/docker-minimal-rules.sh
            /usr/local/pf/bin/pfcmd service pf updatesystemd
        else
            echo "Skipping some steps which will be run at next boot"
        fi

        if [ ${DIST} = "stretch" ]; then
            set +e
            /usr/bin/mysql -uroot -e "update mysql.user set plugin='' where User='root'"
            /usr/bin/mysql -uroot -e "flush privileges"
            set -e
        fi
        if [ ${DIST} = "bullseye" ] && [ "$DEBIAN_ISO_INSTALLER" = "no" ]; then
            set +e
            /usr/bin/mysql -uroot -e "set password for 'root'@'localhost' = password('')"
            set -e
        fi
        if [ ${DIST} = "bookworm" ] && [ "$DEBIAN_ISO_INSTALLER" = "no" ]; then
            set +e
            /usr/bin/mysql -uroot -e "set password for 'root'@'localhost' = password('')"
            set -e
        fi
        # Install the monitoring scripts signing key
        echo "Install the monitoring scripts signing key"
        gpg --no-default-keyring --keyring /root/.gnupg/pubring.kbx --import /usr/share/keyrings/monitoring-scripts-keyring.gpg

        # Remove the monit service from the multi-user target if its there
        rm -f /etc/systemd/system/multi-user.target.wants/monit.service

        echo Installation complete
        echo "* Please fire up your Web browser and go to https://@ip_packetfence:1443 to complete your PacketFence configuration."
        echo "* Please stop firewall service if you don't have access to configurator."
        
        rm -f $PACKETFENCE/var/run/pkg_install_in_progress
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

exit 0
# vim: set shiftwidth=4:
# vim: set expandtab:
